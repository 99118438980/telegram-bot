import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from aiohttp import web  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–∞–º—è—Ç—å
user_state = {}  # user_id -> "anon" / "open"
question_map = {}  # admin_msg_id -> {user_id, mode}

# –ö–Ω–æ–ø–∫–∏
def get_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üì© –ê–Ω–æ–Ω–∏–º–Ω–æ", callback_data="ask_anon")
    kb.button(text="‚úâÔ∏è –û—Ç–∫—Ä—ã—Ç–æ", callback_data="ask_open")
    kb.adjust(1)
    return kb.as_markup()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É–ª–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫–∞—Ç—É—Ö—É ‚ú®!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç —É–≤–∞–∂–∞–µ–º—ã—Ö –∏–º–∞–º–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
        "‚Äî –ê–Ω–æ–Ω–∏–º–Ω–æ\n"
        "‚Äî –û—Ç–∫—Ä—ã—Ç–æ (—Å –∏–º–µ–Ω–µ–º)\n\n"
        "–ü—É—Å—Ç—å –ê–ª–ª–∞—Ö —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±–ª–∞–≥–æ–º –£–º–º—ã!",
        reply_markup=get_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.in_({"ask_anon", "ask_open"}))
async def mode_selected(callback: types.CallbackQuery):
    mode = "anon" if callback.data == "ask_anon" else "open"
    user_state[callback.from_user.id] = mode
    await callback.message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π {'–∞–Ω–æ–Ω–∏–º–Ω—ã–π' if mode == 'anon' else '–æ—Ç–∫—Ä—ã—Ç—ã–π'} –≤–æ–ø—Ä–æ—Å."
    )
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id

    # –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞
    if message.reply_to_message and user_id in ADMIN_IDS:
        original_msg_id = message.reply_to_message.message_id
        if original_msg_id in question_map:
            target = question_map[original_msg_id]
            try:
                await bot.send_message(target["user_id"], f"üì® –û—Ç–≤–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤:\n{message.text}")
                await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º—É.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        return

    # –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_state:
        mode = user_state.pop(user_id)
        text = message.text

        for admin_id in ADMIN_IDS:
            try:
                if mode == "anon":
                    sent = await bot.send_message(
                        admin_id,
                        f"üì© <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>\n\n{text}",
                        parse_mode=ParseMode.HTML
                    )
                else:
                    user_info = f"{message.from_user.full_name}"
                    if message.from_user.username:
                        user_info += f" (@{message.from_user.username})"
                    sent = await bot.send_message(
                        admin_id,
                        f"‚úâÔ∏è <b>–í–æ–ø—Ä–æ—Å –æ—Ç {user_info}:</b>\n\n{text}",
                        parse_mode=ParseMode.HTML
                    )
                question_map[sent.message_id] = {"user_id": user_id, "mode": mode}
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                continue

        await message.answer(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=get_keyboard()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.")

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render/UptimeRobot
async def handle(request):
    return web.Response(text="Bot is alive")

async def start_web_app():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

# –ó–∞–ø—É—Å–∫
async def main():
    await asyncio.gather(
        start_web_app(),
        dp.start_polling(bot)
    )

if __name__ == "__main__":
    asyncio.run(main())
