import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_state = {}  # user_id -> "anon" / "open" / "feedback"
question_map = {}  # admin_msg_id -> {user_id, mode}


def get_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üì© –ê–Ω–æ–Ω–∏–º–Ω–æ", callback_data="ask_anon")
    kb.button(text="‚úâÔ∏è –û—Ç–∫—Ä—ã—Ç–æ", callback_data="ask_open")
    kb.adjust(1)
    return kb.as_markup()


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "<b>–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É–õ–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫–∞—Ç—É—Ö—É ‚ú®</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç ‚Äî <i>–º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç , –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç –∏ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ</i> –æ—Ç —É–≤–∞–∂–∞–µ–º—ã—Ö –∏–º–∞–º–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>\n"
        "üì© ‚Äî <b>–ê–Ω–æ–Ω–∏–º–Ω–æ</b>\n"
        "‚úâÔ∏è ‚Äî <b>–û—Ç–∫—Ä—ã—Ç–æ</b> (—Å –∏–º–µ–Ω–µ–º)\n\n"
        "<i>–ü—É—Å—Ç—å –ê–ª–ª–∞—Ö —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±–ª–∞–≥–æ–º –¥–ª—è –£–º–º—ã!</i>",
        reply_markup=get_keyboard()
    )


@dp.message(Command("ask"))
async def ask_command(message: types.Message):
    user_state[message.from_user.id] = "anon"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–æ–Ω–∏–º–Ω–æ
    await message.answer(
        "‚úçÔ∏è <b>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º –∞–Ω–æ–Ω–∏–º–Ω–æ.</b>\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç–æ¬ª.\n\n"
        "<i>–ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –¥–∞—Å—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –≤–∞—Å –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–¥–µ–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º.</i>"
    )


@dp.message(Command("feedback"))
async def feedback_command(message: types.Message):
    user_state[message.from_user.id] = "feedback"
    await message.answer(
        "‚ú® <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ , –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–≤–µ—Ç –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.</b>\n"
        "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∞—Ç—å—Å—è, –∏ –≤–∞—à–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å.\n\n"
        "<i>–ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–¥–∏—Ç –≤–∞—Å –∑–∞ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞–±–æ—Ç—É –æ–± —É–º–º–µ!</i>"
    )


@dp.callback_query(F.data.in_({"ask_anon", "ask_open"}))
async def mode_selected(callback: types.CallbackQuery):
    mode = "anon" if callback.data == "ask_anon" else "open"
    user_state[callback.from_user.id] = mode
    await callback.message.answer(
        f"‚úçÔ∏è <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à {'–∞–Ω–æ–Ω–∏–º–Ω—ã–π' if mode == 'anon' else '–æ—Ç–∫—Ä—ã—Ç—ã–π'} –≤–æ–ø—Ä–æ—Å.</b>\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç!"
    )
    await callback.answer()


@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–¥–±—ç–∫–∞
    if user_id in user_state and user_state[user_id] == "feedback":
        user_state.pop(user_id)
        for admin_id in ADMIN_IDS:
            try:
                caption = (
                    f"üí¨ <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ / —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name}:</b>\n\n"
                    f"{message.text}"
                )
                await bot.send_message(admin_id, caption)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±—ç–∫–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n"
            "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–µ–º –∏ —É—á—Ç—ë–º, –∏–Ω —à–∞ –ê–ª–ª–∞—Ö."
        )
        return

    # –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.reply_to_message and user_id in ADMIN_IDS:
        original_msg_id = message.reply_to_message.message_id
        if original_msg_id in question_map:
            target = question_map[original_msg_id]
            try:
                caption = (
                    "<b>üì® –û—Ç–≤–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤:</b>\n\n"
                    f"{message.caption or message.text or ''}\n\n"
                    "<i>–ü—É—Å—Ç—å –ê–ª–ª–∞—Ö —É–∫—Ä–µ–ø–∏—Ç –≤–∞—Å –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç –∫ –±–ª–∞–≥–æ–º—É!</i>"
                )
                if message.photo:
                    await bot.send_photo(target["user_id"], message.photo[-1].file_id, caption=caption)
                elif message.video:
                    await bot.send_video(target["user_id"], message.video.file_id, caption=caption)
                else:
                    await bot.send_message(target["user_id"], caption)
                await message.reply("‚úÖ <b>–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

    # –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_state:
        mode = user_state.pop(user_id)
        for admin_id in ADMIN_IDS:
            try:
                user_info = "<i>–ê–Ω–æ–Ω–∏–º–Ω–æ</i>" if mode == "anon" else f"<b>{message.from_user.full_name}</b>"
                if mode == "open" and message.from_user.username:
                    user_info += f" (@{message.from_user.username})"
                caption = (
                    f"üïå <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_info}:</b>\n\n"
                    f"{message.caption or message.text or ''}"
                )
                if message.photo:
                    sent = await bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption)
                elif message.video:
                    sent = await bot.send_video(admin_id, message.video.file_id, caption=caption)
                else:
                    sent = await bot.send_message(admin_id, caption)
                question_map[sent.message_id] = {"user_id": user_id, "mode": mode}
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        await message.answer(
            "‚úÖ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç, –∏–Ω —à–∞ –ê–ª–ª–∞—Ö.",
            reply_markup=get_keyboard()
        )
    else:
        await message.answer(
            "‚ö†Ô∏è <b>–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞.</b>"
        )


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
